Class: INT         	 , Text: int
Class: ID          	 , Text: main
Class: LPAREN      	 , Text: (
Class: RPAREN      	 , Text: )
Class: LBRACE      	 , Text: {
Class: INT         	 , Text: int
Class: ID          	 , Text: a1
Class: EQ          	 , Text: =
Class: INTLITERAL  	 , Text: 1
Class: SEMI        	 , Text: ;
Class: INT         	 , Text: int
Class: ID          	 , Text: a1
Class: LBRACK      	 , Text: [
Class: RBRACK      	 , Text: ]
Class: EQ          	 , Text: =
Class: LBRACE      	 , Text: {
Class: INTLITERAL  	 , Text: 10
Class: RBRACE      	 , Text: }
Class: SEMI        	 , Text: ;
Class: FLOAT       	 , Text: float
Class: ID          	 , Text: f1
Class: LBRACK      	 , Text: [
Class: RBRACK      	 , Text: ]
Class: EQ          	 , Text: =
Class: LBRACE      	 , Text: {
Class: FLOATLITERAL	 , Text: 1.2
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: 1.
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: .1
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: 1e2
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: 1.2E+2
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: 1.2e-2
Class: COMMA       	 , Text: ,
Class: FLOATLITERAL	 , Text: .1E2
Class: RBRACE      	 , Text: }
Class: SEMI        	 , Text: ;
Class: FLOAT       	 , Text: float
Class: ID          	 , Text: f2
Class: EQ          	 , Text: =
Class: FLOATLITERAL	 , Text: 1.2E+2
Class: SEMI        	 , Text: ;
Class: BOOLEAN     	 , Text: boolean
Class: ID          	 , Text: b1
Class: EQ          	 , Text: =
Class: BOOLLITERAL 	 , Text: false
Class: SEMI        	 , Text: ;
Class: BOOLEAN     	 , Text: boolean
Class: ID          	 , Text: b2
Class: LBRACK      	 , Text: [
Class: RBRACK      	 , Text: ]
Class: EQ          	 , Text: =
Class: LBRACE      	 , Text: {
Class: BOOLLITERAL 	 , Text: false
Class: RBRACE      	 , Text: }
Class: SEMI        	 , Text: ;
Class: IF          	 , Text: if
Class: LPAREN      	 , Text: (
Class: ID          	 , Text: b
Class: OROR        	 , Text: ||
Class: ID          	 , Text: a1
Class: EQEQ        	 , Text: ==
Class: INTLITERAL  	 , Text: 5
Class: RPAREN      	 , Text: )
Class: LBRACE      	 , Text: {
Class: INT         	 , Text: int
Class: ID          	 , Text: c
Class: EQ          	 , Text: =
Class: ID          	 , Text: a
Class: TIMES       	 , Text: *
Class: INTLITERAL  	 , Text: 5
Class: SEMI        	 , Text: ;
Class: RBRACE      	 , Text: }
Class: ID          	 , Text: putStringLn
Class: LPAREN      	 , Text: (
Class: STRINGLITERAL	 , Text: group tes
Class: RPAREN      	 , Text: )
Class: SEMI        	 , Text: ;
Class: INT         	 , Text: int
Class: ID          	 , Text: b
Class: LBRACK      	 , Text: [
Class: RBRACK      	 , Text: ]
Class: EQ          	 , Text: =
Class: LBRACE      	 , Text: {
Class: INTLITERAL  	 , Text: 1
Class: COMMA       	 , Text: ,
Class: INTLITERAL  	 , Text: 2
Class: COMMA       	 , Text: ,
Class: INTLITERAL  	 , Text: 3
Class: COMMA       	 , Text: ,
Class: INTLITERAL  	 , Text: 4
Class: RBRACE      	 , Text: }
Class: SEMI        	 , Text: ;
Class: RBRACE      	 , Text: }
Class: EOF         	 , Text: 
